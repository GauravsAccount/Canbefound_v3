# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  collegeId: String
  password: PasswordState
  role: UserRoleType
  phone: String
  isVerified: Boolean
  createdAt: DateTime
  lostItems(where: LostItemWhereInput! = {}, orderBy: [LostItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LostItemWhereUniqueInput): [LostItem!]
  lostItemsCount(where: LostItemWhereInput! = {}): Int
  foundItems(where: FoundItemWhereInput! = {}, orderBy: [FoundItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FoundItemWhereUniqueInput): [FoundItem!]
  foundItemsCount(where: FoundItemWhereInput! = {}): Int
  claims(where: ClaimWhereInput! = {}, orderBy: [ClaimOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClaimWhereUniqueInput): [Claim!]
  claimsCount(where: ClaimWhereInput! = {}): Int
  bids(where: BidWhereInput! = {}, orderBy: [BidOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BidWhereUniqueInput): [Bid!]
  bidsCount(where: BidWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  student
  staff
  admin
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
  collegeId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  collegeId: StringFilter
  role: UserRoleTypeNullableFilter
  phone: StringFilter
  isVerified: BooleanFilter
  createdAt: DateTimeNullableFilter
  lostItems: LostItemManyRelationFilter
  foundItems: FoundItemManyRelationFilter
  claims: ClaimManyRelationFilter
  bids: BidManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input LostItemManyRelationFilter {
  every: LostItemWhereInput
  some: LostItemWhereInput
  none: LostItemWhereInput
}

input FoundItemManyRelationFilter {
  every: FoundItemWhereInput
  some: FoundItemWhereInput
  none: FoundItemWhereInput
}

input ClaimManyRelationFilter {
  every: ClaimWhereInput
  some: ClaimWhereInput
  none: ClaimWhereInput
}

input BidManyRelationFilter {
  every: BidWhereInput
  some: BidWhereInput
  none: BidWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  collegeId: OrderDirection
  role: OrderDirection
  phone: OrderDirection
  isVerified: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  collegeId: String
  password: String
  role: UserRoleType
  phone: String
  isVerified: Boolean
  createdAt: DateTime
  lostItems: LostItemRelateToManyForUpdateInput
  foundItems: FoundItemRelateToManyForUpdateInput
  claims: ClaimRelateToManyForUpdateInput
  bids: BidRelateToManyForUpdateInput
}

input LostItemRelateToManyForUpdateInput {
  disconnect: [LostItemWhereUniqueInput!]
  set: [LostItemWhereUniqueInput!]
  create: [LostItemCreateInput!]
  connect: [LostItemWhereUniqueInput!]
}

input FoundItemRelateToManyForUpdateInput {
  disconnect: [FoundItemWhereUniqueInput!]
  set: [FoundItemWhereUniqueInput!]
  create: [FoundItemCreateInput!]
  connect: [FoundItemWhereUniqueInput!]
}

input ClaimRelateToManyForUpdateInput {
  disconnect: [ClaimWhereUniqueInput!]
  set: [ClaimWhereUniqueInput!]
  create: [ClaimCreateInput!]
  connect: [ClaimWhereUniqueInput!]
}

input BidRelateToManyForUpdateInput {
  disconnect: [BidWhereUniqueInput!]
  set: [BidWhereUniqueInput!]
  create: [BidCreateInput!]
  connect: [BidWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  collegeId: String
  password: String
  role: UserRoleType
  phone: String
  isVerified: Boolean
  createdAt: DateTime
  lostItems: LostItemRelateToManyForCreateInput
  foundItems: FoundItemRelateToManyForCreateInput
  claims: ClaimRelateToManyForCreateInput
  bids: BidRelateToManyForCreateInput
}

input LostItemRelateToManyForCreateInput {
  create: [LostItemCreateInput!]
  connect: [LostItemWhereUniqueInput!]
}

input FoundItemRelateToManyForCreateInput {
  create: [FoundItemCreateInput!]
  connect: [FoundItemWhereUniqueInput!]
}

input ClaimRelateToManyForCreateInput {
  create: [ClaimCreateInput!]
  connect: [ClaimWhereUniqueInput!]
}

input BidRelateToManyForCreateInput {
  create: [BidCreateInput!]
  connect: [BidWhereUniqueInput!]
}

type LostItem {
  id: ID!
  itemName: String
  description: String
  category: LostItemCategoryType
  status: LostItemStatusType
  lostDate: DateTime
  lostTime: String
  location: LostItemLocationType
  specificLocation: String
  circumstances: String
  photo: ImageFieldOutput
  contactEmail: String
  contactPhone: String
  privacyConsent: Boolean
  notifications: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  reportedBy: User
  claims(where: ClaimWhereInput! = {}, orderBy: [ClaimOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClaimWhereUniqueInput): [Claim!]
  claimsCount(where: ClaimWhereInput! = {}): Int
  matchedFoundItem: FoundItem
}

enum LostItemCategoryType {
  electronics
  clothing
  bags
  books
  jewelry
  keys
  sports
  other
}

enum LostItemStatusType {
  active
  found
  claimed
  closed
}

enum LostItemLocationType {
  library
  cafeteria
  gym
  dormitory
  classroom
  parking
  auditorium
  lab
  outdoor
  other
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input LostItemWhereUniqueInput {
  id: ID
  matchedFoundItem: FoundItemWhereUniqueInput
}

input LostItemWhereInput {
  AND: [LostItemWhereInput!]
  OR: [LostItemWhereInput!]
  NOT: [LostItemWhereInput!]
  id: IDFilter
  itemName: StringFilter
  description: StringFilter
  category: LostItemCategoryTypeNullableFilter
  status: LostItemStatusTypeNullableFilter
  lostDate: DateTimeFilter
  lostTime: StringFilter
  location: LostItemLocationTypeNullableFilter
  specificLocation: StringFilter
  circumstances: StringFilter
  contactEmail: StringFilter
  contactPhone: StringFilter
  privacyConsent: BooleanFilter
  notifications: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  reportedBy: UserWhereInput
  claims: ClaimManyRelationFilter
  matchedFoundItem: FoundItemWhereInput
}

input LostItemCategoryTypeNullableFilter {
  equals: LostItemCategoryType
  in: [LostItemCategoryType!]
  notIn: [LostItemCategoryType!]
  not: LostItemCategoryTypeNullableFilter
}

input LostItemStatusTypeNullableFilter {
  equals: LostItemStatusType
  in: [LostItemStatusType!]
  notIn: [LostItemStatusType!]
  not: LostItemStatusTypeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input LostItemLocationTypeNullableFilter {
  equals: LostItemLocationType
  in: [LostItemLocationType!]
  notIn: [LostItemLocationType!]
  not: LostItemLocationTypeNullableFilter
}

input LostItemOrderByInput {
  id: OrderDirection
  itemName: OrderDirection
  description: OrderDirection
  category: OrderDirection
  status: OrderDirection
  lostDate: OrderDirection
  lostTime: OrderDirection
  location: OrderDirection
  specificLocation: OrderDirection
  circumstances: OrderDirection
  contactEmail: OrderDirection
  contactPhone: OrderDirection
  privacyConsent: OrderDirection
  notifications: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LostItemUpdateInput {
  itemName: String
  description: String
  category: LostItemCategoryType
  status: LostItemStatusType
  lostDate: DateTime
  lostTime: String
  location: LostItemLocationType
  specificLocation: String
  circumstances: String
  photo: ImageFieldInput
  contactEmail: String
  contactPhone: String
  privacyConsent: Boolean
  notifications: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  reportedBy: UserRelateToOneForUpdateInput
  claims: ClaimRelateToManyForUpdateInput
  matchedFoundItem: FoundItemRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input FoundItemRelateToOneForUpdateInput {
  create: FoundItemCreateInput
  connect: FoundItemWhereUniqueInput
  disconnect: Boolean
}

input LostItemUpdateArgs {
  where: LostItemWhereUniqueInput!
  data: LostItemUpdateInput!
}

input LostItemCreateInput {
  itemName: String
  description: String
  category: LostItemCategoryType
  status: LostItemStatusType
  lostDate: DateTime
  lostTime: String
  location: LostItemLocationType
  specificLocation: String
  circumstances: String
  photo: ImageFieldInput
  contactEmail: String
  contactPhone: String
  privacyConsent: Boolean
  notifications: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  reportedBy: UserRelateToOneForCreateInput
  claims: ClaimRelateToManyForCreateInput
  matchedFoundItem: FoundItemRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input FoundItemRelateToOneForCreateInput {
  create: FoundItemCreateInput
  connect: FoundItemWhereUniqueInput
}

type FoundItem {
  id: ID!
  itemName: String
  description: String
  category: FoundItemCategoryType
  status: FoundItemStatusType
  foundDate: DateTime
  foundTime: String
  location: FoundItemLocationType
  specificLocation: String
  photo: ImageFieldOutput
  finderName: String
  contactEmail: String
  handoverLocation: FoundItemHandoverLocationType
  customHandoverLocation: String
  additionalNotes: String
  verifyOwnership: Boolean
  handoverAgreement: Boolean
  daysUnclaimed: Int
  createdAt: DateTime
  updatedAt: DateTime
  reportedBy: User
  claims(where: ClaimWhereInput! = {}, orderBy: [ClaimOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClaimWhereUniqueInput): [Claim!]
  claimsCount(where: ClaimWhereInput! = {}): Int
  matchedLostItem: LostItem
  auction: Auction
}

enum FoundItemCategoryType {
  electronics
  clothing
  bags
  books
  jewelry
  keys
  sports
  other
}

enum FoundItemStatusType {
  available
  claimed
  returned
  auction
}

enum FoundItemLocationType {
  library
  cafeteria
  gym
  dormitory
  classroom
  parking
  auditorium
  lab
  outdoor
  other
}

enum FoundItemHandoverLocationType {
  securityoffice
  studentservices
  librarydesk
  adminoffice
  other
}

input FoundItemWhereUniqueInput {
  id: ID
  matchedLostItem: LostItemWhereUniqueInput
  auction: AuctionWhereUniqueInput
}

input FoundItemWhereInput {
  AND: [FoundItemWhereInput!]
  OR: [FoundItemWhereInput!]
  NOT: [FoundItemWhereInput!]
  id: IDFilter
  itemName: StringFilter
  description: StringFilter
  category: FoundItemCategoryTypeNullableFilter
  status: FoundItemStatusTypeNullableFilter
  foundDate: DateTimeFilter
  foundTime: StringFilter
  location: FoundItemLocationTypeNullableFilter
  specificLocation: StringFilter
  finderName: StringFilter
  contactEmail: StringFilter
  handoverLocation: FoundItemHandoverLocationTypeNullableFilter
  customHandoverLocation: StringFilter
  additionalNotes: StringFilter
  verifyOwnership: BooleanFilter
  handoverAgreement: BooleanFilter
  daysUnclaimed: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  reportedBy: UserWhereInput
  claims: ClaimManyRelationFilter
  matchedLostItem: LostItemWhereInput
  auction: AuctionWhereInput
}

input FoundItemCategoryTypeNullableFilter {
  equals: FoundItemCategoryType
  in: [FoundItemCategoryType!]
  notIn: [FoundItemCategoryType!]
  not: FoundItemCategoryTypeNullableFilter
}

input FoundItemStatusTypeNullableFilter {
  equals: FoundItemStatusType
  in: [FoundItemStatusType!]
  notIn: [FoundItemStatusType!]
  not: FoundItemStatusTypeNullableFilter
}

input FoundItemLocationTypeNullableFilter {
  equals: FoundItemLocationType
  in: [FoundItemLocationType!]
  notIn: [FoundItemLocationType!]
  not: FoundItemLocationTypeNullableFilter
}

input FoundItemHandoverLocationTypeNullableFilter {
  equals: FoundItemHandoverLocationType
  in: [FoundItemHandoverLocationType!]
  notIn: [FoundItemHandoverLocationType!]
  not: FoundItemHandoverLocationTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FoundItemOrderByInput {
  id: OrderDirection
  itemName: OrderDirection
  description: OrderDirection
  category: OrderDirection
  status: OrderDirection
  foundDate: OrderDirection
  foundTime: OrderDirection
  location: OrderDirection
  specificLocation: OrderDirection
  finderName: OrderDirection
  contactEmail: OrderDirection
  handoverLocation: OrderDirection
  customHandoverLocation: OrderDirection
  additionalNotes: OrderDirection
  verifyOwnership: OrderDirection
  handoverAgreement: OrderDirection
  daysUnclaimed: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FoundItemUpdateInput {
  itemName: String
  description: String
  category: FoundItemCategoryType
  status: FoundItemStatusType
  foundDate: DateTime
  foundTime: String
  location: FoundItemLocationType
  specificLocation: String
  photo: ImageFieldInput
  finderName: String
  contactEmail: String
  handoverLocation: FoundItemHandoverLocationType
  customHandoverLocation: String
  additionalNotes: String
  verifyOwnership: Boolean
  handoverAgreement: Boolean
  daysUnclaimed: Int
  createdAt: DateTime
  updatedAt: DateTime
  reportedBy: UserRelateToOneForUpdateInput
  claims: ClaimRelateToManyForUpdateInput
  matchedLostItem: LostItemRelateToOneForUpdateInput
  auction: AuctionRelateToOneForUpdateInput
}

input LostItemRelateToOneForUpdateInput {
  create: LostItemCreateInput
  connect: LostItemWhereUniqueInput
  disconnect: Boolean
}

input AuctionRelateToOneForUpdateInput {
  create: AuctionCreateInput
  connect: AuctionWhereUniqueInput
  disconnect: Boolean
}

input FoundItemUpdateArgs {
  where: FoundItemWhereUniqueInput!
  data: FoundItemUpdateInput!
}

input FoundItemCreateInput {
  itemName: String
  description: String
  category: FoundItemCategoryType
  status: FoundItemStatusType
  foundDate: DateTime
  foundTime: String
  location: FoundItemLocationType
  specificLocation: String
  photo: ImageFieldInput
  finderName: String
  contactEmail: String
  handoverLocation: FoundItemHandoverLocationType
  customHandoverLocation: String
  additionalNotes: String
  verifyOwnership: Boolean
  handoverAgreement: Boolean
  daysUnclaimed: Int
  createdAt: DateTime
  updatedAt: DateTime
  reportedBy: UserRelateToOneForCreateInput
  claims: ClaimRelateToManyForCreateInput
  matchedLostItem: LostItemRelateToOneForCreateInput
  auction: AuctionRelateToOneForCreateInput
}

input LostItemRelateToOneForCreateInput {
  create: LostItemCreateInput
  connect: LostItemWhereUniqueInput
}

input AuctionRelateToOneForCreateInput {
  create: AuctionCreateInput
  connect: AuctionWhereUniqueInput
}

type Claim {
  id: ID!
  status: ClaimStatusType
  proofOfOwnership: String
  verificationDetails: String
  adminNotes: String
  reviewedAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  claimant: User
  lostItem: LostItem
  foundItem: FoundItem
  reviewedBy: User
}

enum ClaimStatusType {
  pending
  review
  approved
  rejected
  completed
}

input ClaimWhereUniqueInput {
  id: ID
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  id: IDFilter
  status: ClaimStatusTypeNullableFilter
  proofOfOwnership: StringFilter
  verificationDetails: StringFilter
  adminNotes: StringFilter
  reviewedAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  claimant: UserWhereInput
  lostItem: LostItemWhereInput
  foundItem: FoundItemWhereInput
  reviewedBy: UserWhereInput
}

input ClaimStatusTypeNullableFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: ClaimStatusTypeNullableFilter
}

input ClaimOrderByInput {
  id: OrderDirection
  status: OrderDirection
  proofOfOwnership: OrderDirection
  verificationDetails: OrderDirection
  adminNotes: OrderDirection
  reviewedAt: OrderDirection
  completedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClaimUpdateInput {
  status: ClaimStatusType
  proofOfOwnership: String
  verificationDetails: String
  adminNotes: String
  reviewedAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  claimant: UserRelateToOneForUpdateInput
  lostItem: LostItemRelateToOneForUpdateInput
  foundItem: FoundItemRelateToOneForUpdateInput
  reviewedBy: UserRelateToOneForUpdateInput
}

input ClaimUpdateArgs {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateInput!
}

input ClaimCreateInput {
  status: ClaimStatusType
  proofOfOwnership: String
  verificationDetails: String
  adminNotes: String
  reviewedAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  claimant: UserRelateToOneForCreateInput
  lostItem: LostItemRelateToOneForCreateInput
  foundItem: FoundItemRelateToOneForCreateInput
  reviewedBy: UserRelateToOneForCreateInput
}

type Auction {
  id: ID!
  title: String
  description: String
  startingPrice: Int
  currentBid: Int
  bidIncrement: Int
  startTime: DateTime
  endTime: DateTime
  status: AuctionStatusType
  bidCount: Int
  reservePrice: Int
  buyNowPrice: Int
  createdAt: DateTime
  updatedAt: DateTime
  item: FoundItem
  bids(where: BidWhereInput! = {}, orderBy: [BidOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BidWhereUniqueInput): [Bid!]
  bidsCount(where: BidWhereInput! = {}): Int
  winner: User
  createdBy: User
}

enum AuctionStatusType {
  scheduled
  active
  endingsoon
  ended
  cancelled
}

input AuctionWhereUniqueInput {
  id: ID
  item: FoundItemWhereUniqueInput
}

input AuctionWhereInput {
  AND: [AuctionWhereInput!]
  OR: [AuctionWhereInput!]
  NOT: [AuctionWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  startingPrice: IntFilter
  currentBid: IntNullableFilter
  bidIncrement: IntNullableFilter
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  status: AuctionStatusTypeNullableFilter
  bidCount: IntNullableFilter
  reservePrice: IntNullableFilter
  buyNowPrice: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  item: FoundItemWhereInput
  bids: BidManyRelationFilter
  winner: UserWhereInput
  createdBy: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input AuctionStatusTypeNullableFilter {
  equals: AuctionStatusType
  in: [AuctionStatusType!]
  notIn: [AuctionStatusType!]
  not: AuctionStatusTypeNullableFilter
}

input AuctionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  startingPrice: OrderDirection
  currentBid: OrderDirection
  bidIncrement: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  status: OrderDirection
  bidCount: OrderDirection
  reservePrice: OrderDirection
  buyNowPrice: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AuctionUpdateInput {
  title: String
  description: String
  startingPrice: Int
  currentBid: Int
  bidIncrement: Int
  startTime: DateTime
  endTime: DateTime
  status: AuctionStatusType
  bidCount: Int
  reservePrice: Int
  buyNowPrice: Int
  createdAt: DateTime
  updatedAt: DateTime
  item: FoundItemRelateToOneForUpdateInput
  bids: BidRelateToManyForUpdateInput
  winner: UserRelateToOneForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
}

input AuctionUpdateArgs {
  where: AuctionWhereUniqueInput!
  data: AuctionUpdateInput!
}

input AuctionCreateInput {
  title: String
  description: String
  startingPrice: Int
  currentBid: Int
  bidIncrement: Int
  startTime: DateTime
  endTime: DateTime
  status: AuctionStatusType
  bidCount: Int
  reservePrice: Int
  buyNowPrice: Int
  createdAt: DateTime
  updatedAt: DateTime
  item: FoundItemRelateToOneForCreateInput
  bids: BidRelateToManyForCreateInput
  winner: UserRelateToOneForCreateInput
  createdBy: UserRelateToOneForCreateInput
}

type Bid {
  id: ID!
  amount: Int
  isWinning: Boolean
  isAutoBid: Boolean
  maxAutoBid: Int
  bidTime: DateTime
  auction: Auction
  bidder: User
}

input BidWhereUniqueInput {
  id: ID
}

input BidWhereInput {
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
  NOT: [BidWhereInput!]
  id: IDFilter
  amount: IntFilter
  isWinning: BooleanFilter
  isAutoBid: BooleanFilter
  maxAutoBid: IntNullableFilter
  bidTime: DateTimeNullableFilter
  auction: AuctionWhereInput
  bidder: UserWhereInput
}

input BidOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  isWinning: OrderDirection
  isAutoBid: OrderDirection
  maxAutoBid: OrderDirection
  bidTime: OrderDirection
}

input BidUpdateInput {
  amount: Int
  isWinning: Boolean
  isAutoBid: Boolean
  maxAutoBid: Int
  bidTime: DateTime
  auction: AuctionRelateToOneForUpdateInput
  bidder: UserRelateToOneForUpdateInput
}

input BidUpdateArgs {
  where: BidWhereUniqueInput!
  data: BidUpdateInput!
}

input BidCreateInput {
  amount: Int
  isWinning: Boolean
  isAutoBid: Boolean
  maxAutoBid: Int
  bidTime: DateTime
  auction: AuctionRelateToOneForCreateInput
  bidder: UserRelateToOneForCreateInput
}

type Category {
  id: ID!
  name: String
  description: String
  icon: String
  isActive: Boolean
  sortOrder: Int
  createdAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  icon: StringFilter
  isActive: BooleanFilter
  sortOrder: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  icon: OrderDirection
  isActive: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  description: String
  icon: String
  isActive: Boolean
  sortOrder: Int
  createdAt: DateTime
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  description: String
  icon: String
  isActive: Boolean
  sortOrder: Int
  createdAt: DateTime
}

type Location {
  id: ID!
  name: String
  description: String
  building: String
  floor: String
  isActive: Boolean
  sortOrder: Int
  createdAt: DateTime
}

input LocationWhereUniqueInput {
  id: ID
  name: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  building: StringFilter
  floor: StringFilter
  isActive: BooleanFilter
  sortOrder: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  building: OrderDirection
  floor: OrderDirection
  isActive: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
}

input LocationUpdateInput {
  name: String
  description: String
  building: String
  floor: String
  isActive: Boolean
  sortOrder: Int
  createdAt: DateTime
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  description: String
  building: String
  floor: String
  isActive: Boolean
  sortOrder: Int
  createdAt: DateTime
}

type ContactMessage {
  id: ID!
  name: String
  email: String
  subject: ContactMessageSubjectType
  message: String
  status: ContactMessageStatusType
  priority: ContactMessagePriorityType
  adminResponse: String
  respondedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  respondedBy: User
}

enum ContactMessageSubjectType {
  account
  item
  auction
  technical
  other
}

enum ContactMessageStatusType {
  new
  inprogress
  resolved
  closed
}

enum ContactMessagePriorityType {
  low
  medium
  high
  urgent
}

input ContactMessageWhereUniqueInput {
  id: ID
}

input ContactMessageWhereInput {
  AND: [ContactMessageWhereInput!]
  OR: [ContactMessageWhereInput!]
  NOT: [ContactMessageWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  subject: ContactMessageSubjectTypeNullableFilter
  message: StringFilter
  status: ContactMessageStatusTypeNullableFilter
  priority: ContactMessagePriorityTypeNullableFilter
  adminResponse: StringFilter
  respondedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  respondedBy: UserWhereInput
}

input ContactMessageSubjectTypeNullableFilter {
  equals: ContactMessageSubjectType
  in: [ContactMessageSubjectType!]
  notIn: [ContactMessageSubjectType!]
  not: ContactMessageSubjectTypeNullableFilter
}

input ContactMessageStatusTypeNullableFilter {
  equals: ContactMessageStatusType
  in: [ContactMessageStatusType!]
  notIn: [ContactMessageStatusType!]
  not: ContactMessageStatusTypeNullableFilter
}

input ContactMessagePriorityTypeNullableFilter {
  equals: ContactMessagePriorityType
  in: [ContactMessagePriorityType!]
  notIn: [ContactMessagePriorityType!]
  not: ContactMessagePriorityTypeNullableFilter
}

input ContactMessageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  subject: OrderDirection
  message: OrderDirection
  status: OrderDirection
  priority: OrderDirection
  adminResponse: OrderDirection
  respondedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContactMessageUpdateInput {
  name: String
  email: String
  subject: ContactMessageSubjectType
  message: String
  status: ContactMessageStatusType
  priority: ContactMessagePriorityType
  adminResponse: String
  respondedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  respondedBy: UserRelateToOneForUpdateInput
}

input ContactMessageUpdateArgs {
  where: ContactMessageWhereUniqueInput!
  data: ContactMessageUpdateInput!
}

input ContactMessageCreateInput {
  name: String
  email: String
  subject: ContactMessageSubjectType
  message: String
  status: ContactMessageStatusType
  priority: ContactMessagePriorityType
  adminResponse: String
  respondedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  respondedBy: UserRelateToOneForCreateInput
}

type SystemSettings {
  id: ID!
  settingKey: String
  settingValue: String
  description: String
  dataType: SystemSettingsDataTypeType
  isPublic: Boolean
  updatedAt: DateTime
  updatedBy: User
}

enum SystemSettingsDataTypeType {
  string
  number
  boolean
  json
}

input SystemSettingsWhereUniqueInput {
  id: ID
  settingKey: String
}

input SystemSettingsWhereInput {
  AND: [SystemSettingsWhereInput!]
  OR: [SystemSettingsWhereInput!]
  NOT: [SystemSettingsWhereInput!]
  id: IDFilter
  settingKey: StringFilter
  settingValue: StringFilter
  description: StringFilter
  dataType: SystemSettingsDataTypeTypeNullableFilter
  isPublic: BooleanFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
}

input SystemSettingsDataTypeTypeNullableFilter {
  equals: SystemSettingsDataTypeType
  in: [SystemSettingsDataTypeType!]
  notIn: [SystemSettingsDataTypeType!]
  not: SystemSettingsDataTypeTypeNullableFilter
}

input SystemSettingsOrderByInput {
  id: OrderDirection
  settingKey: OrderDirection
  settingValue: OrderDirection
  description: OrderDirection
  dataType: OrderDirection
  isPublic: OrderDirection
  updatedAt: OrderDirection
}

input SystemSettingsUpdateInput {
  settingKey: String
  settingValue: String
  description: String
  dataType: SystemSettingsDataTypeType
  isPublic: Boolean
  updatedAt: DateTime
  updatedBy: UserRelateToOneForUpdateInput
}

input SystemSettingsUpdateArgs {
  where: SystemSettingsWhereUniqueInput!
  data: SystemSettingsUpdateInput!
}

input SystemSettingsCreateInput {
  settingKey: String
  settingValue: String
  description: String
  dataType: SystemSettingsDataTypeType
  isPublic: Boolean
  updatedAt: DateTime
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createLostItem(data: LostItemCreateInput!): LostItem
  createLostItems(data: [LostItemCreateInput!]!): [LostItem]
  updateLostItem(where: LostItemWhereUniqueInput!, data: LostItemUpdateInput!): LostItem
  updateLostItems(data: [LostItemUpdateArgs!]!): [LostItem]
  deleteLostItem(where: LostItemWhereUniqueInput!): LostItem
  deleteLostItems(where: [LostItemWhereUniqueInput!]!): [LostItem]
  createFoundItem(data: FoundItemCreateInput!): FoundItem
  createFoundItems(data: [FoundItemCreateInput!]!): [FoundItem]
  updateFoundItem(where: FoundItemWhereUniqueInput!, data: FoundItemUpdateInput!): FoundItem
  updateFoundItems(data: [FoundItemUpdateArgs!]!): [FoundItem]
  deleteFoundItem(where: FoundItemWhereUniqueInput!): FoundItem
  deleteFoundItems(where: [FoundItemWhereUniqueInput!]!): [FoundItem]
  createClaim(data: ClaimCreateInput!): Claim
  createClaims(data: [ClaimCreateInput!]!): [Claim]
  updateClaim(where: ClaimWhereUniqueInput!, data: ClaimUpdateInput!): Claim
  updateClaims(data: [ClaimUpdateArgs!]!): [Claim]
  deleteClaim(where: ClaimWhereUniqueInput!): Claim
  deleteClaims(where: [ClaimWhereUniqueInput!]!): [Claim]
  createAuction(data: AuctionCreateInput!): Auction
  createAuctions(data: [AuctionCreateInput!]!): [Auction]
  updateAuction(where: AuctionWhereUniqueInput!, data: AuctionUpdateInput!): Auction
  updateAuctions(data: [AuctionUpdateArgs!]!): [Auction]
  deleteAuction(where: AuctionWhereUniqueInput!): Auction
  deleteAuctions(where: [AuctionWhereUniqueInput!]!): [Auction]
  createBid(data: BidCreateInput!): Bid
  createBids(data: [BidCreateInput!]!): [Bid]
  updateBid(where: BidWhereUniqueInput!, data: BidUpdateInput!): Bid
  updateBids(data: [BidUpdateArgs!]!): [Bid]
  deleteBid(where: BidWhereUniqueInput!): Bid
  deleteBids(where: [BidWhereUniqueInput!]!): [Bid]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createContactMessage(data: ContactMessageCreateInput!): ContactMessage
  createContactMessages(data: [ContactMessageCreateInput!]!): [ContactMessage]
  updateContactMessage(where: ContactMessageWhereUniqueInput!, data: ContactMessageUpdateInput!): ContactMessage
  updateContactMessages(data: [ContactMessageUpdateArgs!]!): [ContactMessage]
  deleteContactMessage(where: ContactMessageWhereUniqueInput!): ContactMessage
  deleteContactMessages(where: [ContactMessageWhereUniqueInput!]!): [ContactMessage]
  createSystemSettings(data: SystemSettingsCreateInput!): SystemSettings
  createSystemSettingsList(data: [SystemSettingsCreateInput!]!): [SystemSettings]
  updateSystemSettings(where: SystemSettingsWhereUniqueInput!, data: SystemSettingsUpdateInput!): SystemSettings
  updateSystemSettingsList(data: [SystemSettingsUpdateArgs!]!): [SystemSettings]
  deleteSystemSettings(where: SystemSettingsWhereUniqueInput!): SystemSettings
  deleteSystemSettingsList(where: [SystemSettingsWhereUniqueInput!]!): [SystemSettings]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  collegeId: String
  password: String
  role: UserRoleType
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  lostItem(where: LostItemWhereUniqueInput!): LostItem
  lostItems(where: LostItemWhereInput! = {}, orderBy: [LostItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LostItemWhereUniqueInput): [LostItem!]
  lostItemsCount(where: LostItemWhereInput! = {}): Int
  foundItem(where: FoundItemWhereUniqueInput!): FoundItem
  foundItems(where: FoundItemWhereInput! = {}, orderBy: [FoundItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FoundItemWhereUniqueInput): [FoundItem!]
  foundItemsCount(where: FoundItemWhereInput! = {}): Int
  claim(where: ClaimWhereUniqueInput!): Claim
  claims(where: ClaimWhereInput! = {}, orderBy: [ClaimOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClaimWhereUniqueInput): [Claim!]
  claimsCount(where: ClaimWhereInput! = {}): Int
  auction(where: AuctionWhereUniqueInput!): Auction
  auctions(where: AuctionWhereInput! = {}, orderBy: [AuctionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuctionWhereUniqueInput): [Auction!]
  auctionsCount(where: AuctionWhereInput! = {}): Int
  bid(where: BidWhereUniqueInput!): Bid
  bids(where: BidWhereInput! = {}, orderBy: [BidOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BidWhereUniqueInput): [Bid!]
  bidsCount(where: BidWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  contactMessage(where: ContactMessageWhereUniqueInput!): ContactMessage
  contactMessages(where: ContactMessageWhereInput! = {}, orderBy: [ContactMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactMessageWhereUniqueInput): [ContactMessage!]
  contactMessagesCount(where: ContactMessageWhereInput! = {}): Int
  systemSettings(where: SystemSettingsWhereUniqueInput!): SystemSettings
  systemSettingsList(where: SystemSettingsWhereInput! = {}, orderBy: [SystemSettingsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SystemSettingsWhereUniqueInput): [SystemSettings!]
  systemSettingsListCount(where: SystemSettingsWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
